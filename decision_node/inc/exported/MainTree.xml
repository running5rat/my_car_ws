<?xml version="1.0" encoding="utf-8"?>
<!--EXPORTED BY TOOL, DON'T MODIFY IT!-->
<!--Source File: MainTree.xml-->
<behavior name="MainTree" agenttype="behaviac::Agent" version="5">
  <node class="Sequence" id="14">
    <node class="Sequence" id="22">
      <node class="Action" id="30">
        <property Method="GroupAsBasicLogic.GroupAsBasicLogic::ActionCancel()" />
        <property ResultOption="BT_SUCCESS" />
      </node>
      <node class="Assignment" id="32">
        <property CastRight="false" />
        <property Opl="TaskIndividual GroupAsBasicLogic.GroupAsBasicLogic::CurrentTask" />
        <property Opr="const TaskIndividual NonTask" />
      </node>
      <node class="Action" id="24">
        <property Method="GroupAsBasicLogic.GroupAsBasicLogic::SetMemberAndGoal()" />
        <property ResultOption="BT_SUCCESS" />
      </node>
      <node class="Assignment" id="15">
        <property CastRight="false" />
        <property Opl="bool GroupAsBasicLogic.GroupAsBasicLogic::wait_for_CB" />
        <property Opr="const bool true" />
      </node>
    </node>
    <node class="DecoratorLoopUntil" id="20">
      <property Count="const int -1" />
      <property DecorateWhenChildEnds="true" />
      <property Until="true" />
      <node class="Sequence" id="5">
        <node class="DecoratorLoopUntil" id="1">
          <property Count="const int -1" />
          <property DecorateWhenChildEnds="true" />
          <property Until="true" />
          <node class="Sequence" id="4">
            <node class="Action" id="17">
              <property Method="GroupAsBasicLogic.GroupAsBasicLogic::RealTimeProcessing()" />
              <property ResultOption="BT_SUCCESS" />
            </node>
            <node class="Condition" id="21">
              <property Operator="Equal" />
              <property Opl="bool GroupAsBasicLogic.GroupAsBasicLogic::wait_for_CB" />
              <property Opr="const bool false" />
            </node>
            <node class="Condition" id="0">
              <property Operator="Equal" />
              <property Opl="GroupAsBasicLogic.GroupAsBasicLogic::MemberConsistent()" />
              <property Opr="const bool true" />
            </node>
            <node class="Assignment" id="3">
              <property CastRight="false" />
              <property Opl="TaskIndividual GroupAsBasicLogic.GroupAsBasicLogic::CurrentTask" />
              <property Opr="GroupAsBasicLogic.GroupAsBasicLogic::TaskListPop()" />
            </node>
            <node class="ReferencedBehavior" id="16">
              <property ReferenceBehavior="const string &quot;TaskJudgeSubTree&quot;" />
            </node>
            <node class="Assignment" id="23">
              <property CastRight="false" />
              <property Opl="bool GroupAsBasicLogic.GroupAsBasicLogic::wait_for_CB" />
              <property Opr="const bool true" />
            </node>
          </node>
        </node>
        <node class="DecoratorLoopUntil" id="8">
          <property Count="const int -1" />
          <property DecorateWhenChildEnds="true" />
          <property Until="true" />
          <node class="Sequence" id="6">
            <node class="Action" id="18">
              <property Method="GroupAsBasicLogic.GroupAsBasicLogic::RealTimeProcessing()" />
              <property ResultOption="BT_SUCCESS" />
            </node>
            <node class="Condition" id="25">
              <property Operator="Equal" />
              <property Opl="bool GroupAsBasicLogic.GroupAsBasicLogic::wait_for_CB" />
              <property Opr="const bool false" />
            </node>
            <node class="Condition" id="7">
              <property Operator="Equal" />
              <property Opl="GroupAsBasicLogic.GroupAsBasicLogic::GroupIdle()" />
              <property Opr="const bool true" />
            </node>
            <node class="Selector" id="10">
              <node class="Sequence" id="12">
                <node class="Condition" id="9">
                  <property Operator="NotEqual" />
                  <property Opl="GroupAsBasicLogic.GroupAsBasicLogic::TaskListEmpty()" />
                  <property Opr="const bool true" />
                </node>
                <node class="Action" id="2">
                  <property Method="GroupAsBasicLogic.GroupAsBasicLogic::SetMemberAndGoal()" />
                  <property ResultOption="BT_SUCCESS" />
                </node>
              </node>
              <node class="Sequence" id="13">
                <node class="Condition" id="11">
                  <property Operator="Equal" />
                  <property Opl="GroupAsBasicLogic.GroupAsBasicLogic::TaskListEmpty()" />
                  <property Opr="const bool true" />
                </node>
                <node class="Action" id="26">
                  <property Method="GroupAsBasicLogic.behaviac::Agent::VectorClear(vector&lt;int&gt; GroupAsBasicLogic.GroupAsBasicLogic::GroupMember)" />
                  <property ResultOption="BT_SUCCESS" />
                </node>
              </node>
            </node>
          </node>
        </node>
        <node class="Condition" id="19">
          <property Operator="Equal" />
          <property Opl="GroupAsBasicLogic.GroupAsBasicLogic::TaskListEmpty()" />
          <property Opr="const bool true" />
        </node>
      </node>
    </node>
  </node>
</behavior>